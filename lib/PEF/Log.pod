=head1 NAME

PEF::Log - Logging framework for Perl

=head1 SYNOPSIS

   use PEF::Log;
   PEF::Log->init(file => "log-config.yaml");
   
   logit debug {"started program"};
   
   --or--
   
   use PEF::Log (streams => [qw(start input output flesh)];
   PEF::Log->init(file => "log-config.yaml");
   
   logit debug::start {"started program"} info::start {"everything is ok"};
   # ... some stuff
   logit debug::output { { result => "OK" } };
   
   --or--
   
   use PEF::Log;
   PEF::Log->init(plain_config => <<CONFIG);
   ---
   appenders:
     screen:
       out: stderr
       format: line
     file-debug:
       class: file
       out: ./debug.txt
       format: line
   formats:
     line:
       format: "%d [%P][%l.%s][%C{1}::%S(%L)]: %m%n"
       stringify: dumpAll
       class: pattern
   routes:
     default:
       debug: file-debug
       info: file-debug
       warning: [file-debug, screen]
       error: [file-debug, screen]
       critical: [file-debug, screen]
       fatal: [file-debug, screen]
       deadly: [file-debug, screen]
     context:
       "secret stuff":
         debug: off
   CONFIG
   {
     my $ctx = "secret stuff";
     logcontext \$ctx;
     # try now debug
     logit debug {"nobody see it"};
   }
   logit debug {"now it magically appears in file-debug"};

=head1 ABSTRACT

PEF::Log provides a very powerful logging API for your application

=head1 DESCRIPTION

PEF::Log makes logging easy and intuitive. It combines performance and very 
fine-grained logging behavior of your application.

=over 4

=item *

Logging messages are lazy calculated because they are inside anonymous code 
reference which is good for performance. 

=item *

It has an automatic context stack management with localized cache. 

=item *

Message routing can depend on context, subroutine or package.  

=item *

Logging levels can possess streams for precise control of logging behavior
of different application parts.  

=item *

Logging messages can be simple strings, anonymous arrays or hashes.

=item *

It is possible to inject transformation filters for some log appenders.

=item *
 
Logger's config can be reloaded at any time.

=back

=head1 How to use it

First, it must be initialized in your application startup code.

   use PEF::Log;
   PEF::Log->init(file => "log-config.yaml");

To use streams, they must be passed as import arguments to PEF::Log:

   use PEF::Log (streams => [qw(start input output flesh)];
   PEF::Log->init(file => "log-config.yaml");

Config file must be in YAML format. You can also use C<plain_config> parameter
to pass config as plain text in YAML format. Don't intermix C<plain_config> 
and C<file> options, they are known to be not merging properly.

Second, just use it.

   logit info {"started program"};

C<logit> is exported by default logging function. It accepts messages after 
passing them through one of the B<level-functions>, such as: C<debug>,
C<info>, C<warning>, C<error>, C<critical>, C<fatal> and C<deadly>, which are
also exported. C<deadly> means "log and die". It flushes open appenders and dies.

With defined streams every of B<level-functions> is multiplicated by every 
stream, e.g.: C<debug::start>, C<debug::input>, C<debug::output>, 
C<debug::flesh>, and so on.

B<Level-functions> accepts code block as it first argument. Code blocks are 
executed only when this particular log level finds its appender. Its returned 
values are used as logging messages. Every value - one message. 
B<Level-functions> passes all others arguments unchanged.  Therefore it is 
possible to log different levels in one go:

   logit debug::start {"started program"} info::start {"everything is ok"};

One of the interesting features is using structured messages to log:

   logit debug::input { {email => $email, password => $password, ip => $ip } };

This anonymous hash is passed to appropriate appenders as is. Line-oriented
appenders can transform such message into string using B<pattern> formatter.

   formats:
     line:
       format: "%d %m{ip} - %m{email}%n"
       stringify: dumpAll
       class: pattern

Every appender that is configured to use format C<line> here will write line
such as "15.04.10 16:36:21 192.168.1.1 - test@test.net\n" in its output.

=head1 How to use context

Context is just a stack of named local storages. Living time of susch a storage
is the same as lexical scope of the binded variable. There's always context
"main" on the lowest level:

   logcache X => "X-Men";      # put "X-Men" in key "X" of the context storage
   {                           # start new scope
     my $ctx = "second level"; # binded variable
     logcontext \$ctx;         # binded variable must be passed always by reference
     logcache X => "X-Women";  # now key "X" is equal to "X-Women"
     print logcache "X";       # prints "X-Women"
   }                           # end of the scope of $ctx
   print logcache "X";         # prints "X-Men"

Its purpose is logical differentiation of different application parts with 
similar interface. E.g.:

   sub send_client_email {
     # ...
     my $email = logcache "email";
     logit debug::email { "sending message to $email" };
     # ...
   }

   sub order_handler {
     # ...
     my $ctx = "order";
     logcontext \$ctx;
     logcache email => $client_email;
     # ...
     send_client_email();
     # ...
   }
   
   sub support_handler {
     # ...
     my $ctx = "support";
     logcontext \$ctx;
     logcache email => $client_email;
     # ...
     send_client_email();
     # ...
   }

When C<send_client_email()> is called from C<order_handler()> its logging
messages can be routed according "order" context which can be different
from "support" context. It is also possible to use context storage data to
add into logging information.

=head1 How to configure

Config can be file or text in YAML format. It has three main sections:

=over 4

=item appenders

This section describes log appenders. Configuration parameters of every 
appender are passed to its constructor. Typical parameters are:

=over 8

=item out

Output file, stream, socket and so on.

=item format

Name of used formatter from B<formats> section. Logging message is passed
as is when format is not defined.

=item class

Class name for this appender. Class names from C<PEF::Log> modules can be 
reduced to last word, possibly with lowercased first letter. 
C<screen> means C<PEF::Log::Appender::Screen>. When class name is not
pointed out then appender's name is used.

=item filter

Sometimes appender has to transform some data from logging message to another
values. For example, there's C<id_client> field in the logging data and 
appender wants client's name to log. This field specifies user's supplied
class with method C<transform($msg)>. Changed C<$msg> passed further to 
appender.

=item <any>

Any other parameters passed to appender's constructor.

=back

=item formats

Configuration parameters of every format are passed to its constructor. 
Formatting class can be supplied by user or C<PEF::Log>'s pattern formatter
used.

Typical parameters are:

=over 8

=item format

Format specification.

=item class

Class name for this format. Class names from C<PEF::Log> modules can be 
reduced to last word, possibly with lowercased first letter. 
C<pattern> means C<PEF::Log::Format::Pattern>. When class name is not
pointed out then format's name is used.

=item stringify

Class name for stringification of complex data. Class names from C<PEF::Log>
modules can be reduced to last word, possibly with lowercased first letter. 
C<dumpAll> means C<PEF::Log::Stringify::DumpAll>. By default is
C<PEF::Log::Stringify::DumpAll> used.

=back

=item routes

This section defines how to select appenders for the logging message.
There're four subsections and they are looked in this order through: 
B<subroutine>, B<context>, B<package>, B<default>. When logging level 
with possible stream is found then found appenders are used.

   default:
     warning: screen
     error: [screen, file-err]

It's possible to customize logging levels with streams.

   default:
     warning: screen
     error: [screen, file-err]
     debug: file-debug
     debug.dump: [dumper, file-debug]

When no other sections found, then B<default> is used. Every debug level
message will go into B<file-debug> appender except one's with stream 
B<dump>, they will go in to appenders B<dumper> and B<file-debug>.

=back

=head2 Pattern formatter

There's one pattern formatter in C<PEF::Log>. It's very powerfull and
probalbly the only one that is needed. Different appenders can use different
formats. When you need one more log pattern, create new appender with this 
format.

The format string can contain a number of placeholders which will be
replaced by the logging engine when it's time to log the message:

   %d Current date in %y.%m.%d %H:%M:%S format
   %d{...} Current date in customized format
   %l Level of the message to be logged
   %s Stream of the message to be logged
   %n New line
   %m Stringified message to be logged
   %m{} Key value(s) of message to be logged
   %M{} Excluded key value(s) of message to be logged
   %L Line number within the file where the log statement was issued
   %C{} Module/Class name or its part from end where the logging request was issued
   %S subroutine where the logging request was issued
   %P pid of the current process
   %r Number of milliseconds elapsed from program start to logging
      event
   %R Number of milliseconds elapsed from last logging event to
      current logging event
   %T A stack trace of functions called
   %x The topmost context name
   %c{} Value of the key from context cache
   %G{} Value of the key from global store
   %% A literal percent (%) sign

All placeholders are quantifiable, just like in printf. Following this tradition, 
%-20x will reserve 20 chars for the context name and left-justify it.

=head1 Known issues

No known issues.

=head1 See also

This module is all need to see. 

=head1 Authors

This module was written and is maintained by:

=over

=item * PEF Developer <pef-secure@yandex.ru>

=back


=cut