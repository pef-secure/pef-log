---
appenders:
  screen:
    out: stderr
    format: line
#  socket:
#    out: unix:///syslog.sock
#    timeout: 10
#  dbi-system:
#    out: test_log
#    filter: changeMe
#    fields: [ip, action, result, comment]
#    skip-not-exists: true
#    skip-undef: true
#    new-row-func: struct_new_row
#    rest: comment
  dump:
    out: "%G{session}/%C::%S::%x"
    format: yaml
    cut-line: "------------- %d -------------%n"
  file-err:
    class: file
    out: ./error.txt
    format: line
  file-warn:
    class: file
    out: ./warn.txt
    format: line
  file-info:
    class: file
    out: ./info.txt
    format: line
  file-debug:
    class: file
    out: ./debug.txt
    format: line
#    %d Current date in %y.%m.%d %H:%M:%S format
#    %d{...} Current date in customized format
#    %l Level of the message to be logged
#    %s Stream of the message to be logged
#    %n New line
#    %m Stringified message to be logged
#    %m{} Key value(s) of message to be logged
#    %M{} Excluded key value(s) of message to be logged
#    %L Line number within the file where the log statement was issued
#    %C{} Module/Class name or its part from end where the logging request was issued
#    %S subroutine where the logging request was issued
#    %P pid of the current process
#    %r Number of milliseconds elapsed from program start to logging 
#       event
#    %R Number of milliseconds elapsed from last logging event to
#       current logging event 
#    %T A stack trace of functions called
#    %x The topmost context name
#    %c{} Value of the key from context cache
#    %G{} Value of the key from global store
#    %% A literal percent (%) sign
formats:
  line:
    format: "%d [%P][%l.%s][%C{1}::%S(%L)]: %m%n"
    stringify: dumpAll
    class: pattern
  fluentd:
    class: fluentdJ
    tag: "%G{host}.%G{application}.%l.%s"
    container: gelf
  gelf:
    short:
    full:
    host:
    multiline: false
    extra:
      user_id: 1
  yaml:
streams: [input, result]
routes:
  default:
    debug: file-debug
    info: file-info
    warning: [file-warn, screen]
    error: [file-err, screen]
    critical: [file-err, screen]
    fatal: [file-err, screen]
    deadly: [file-err, screen]
  context:
    "test debug off":
      debug: off
    "test stream":
      debug.input: off
      debug.result: screen
  subroutine:
    test_subroutine:
      info: screen
  package:
    Test:
      debug: screen
      